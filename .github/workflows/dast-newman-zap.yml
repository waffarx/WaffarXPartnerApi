name: "DAST: Newman + ZAP Proxy 26"

on:
  workflow_dispatch:

jobs:
  dast-proxy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull ZAP Docker image
        run: docker pull zaproxy/zap-stable:latest

      - name: Start ZAP daemon in Docker
        run: |
          mkdir -p zap-reports
          chmod 777 zap-reports
          docker run -d \
            --name zap \
            -p 8080:8080 \
            -v "${{ github.workspace }}/postman/add-signature.js:/zap/scripts/add-signature.js:ro" \
            -v "${{ github.workspace }}/zap-reports:/zap/wrk" \
            --memory="2g" \
            --user root \
            zaproxy/zap-stable:latest \
            zap.sh -daemon -host 0.0.0.0 -port 8080 \
                   -config api.disablekey=true \
                   -config connection.timeoutInSecs=120 \
                   -config scanner.threadPerHost=10 \
                   -script /zap/scripts/add-signature.js

      - name: Wait for ZAP to be ready
        run: |
          for i in {1..24}; do
            if curl --silent --fail http://127.0.0.1:8080; then
              echo "ZAP is ready"
              break
            fi
            echo "Waiting for ZAP to start (attempt $i/24)..."
            sleep 5
          done

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman collection via ZAP proxy
        env:
          HTTP_PROXY: http://127.0.0.1:8080
          HTTPS_PROXY: http://127.0.0.1:8080
          NODE_TLS_REJECT_UNAUTHORIZED: '0'
        run: |
          newman run postman/WaffarXPartnerApi.postman_collection.json \
            --globals postman/workspace.postman_globals.json

      - name: Prepare ZAP for scan
        run: |
          docker exec zap apt-get update
          docker exec zap apt-get install -y curl jq
          
          # Set ZAP timeouts
          docker exec zap curl -s "http://localhost:8080/JSON/core/action/setOptionTimeoutInSecs/?apikey=&Integer=120"
          docker exec zap curl -s "http://localhost:8080/JSON/ascan/action/setOptionScanTimeoutInMins/?apikey=&Integer=50"

      - name: Run ZAP active scan via API
        run: |
          echo "Starting active scan..."
          
          # Start scan
          scan_start=$(docker exec zap sh -c 'curl -s "http://localhost:8080/JSON/ascan/action/scan/?apikey=&url=https://partners.waffarx.com&recurse=true"')
          echo "Scan start response: $scan_start"
          
          # Monitor progress
          start_time=$(date +%s)
          timeout=$((60 * 50))
          last_status=0
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge $timeout ]; then
              echo "Scan timed out after 50 minutes"
              break
            fi
            
            status_output=$(docker exec zap sh -c 'curl -s "http://localhost:8080/JSON/ascan/view/status/?apikey="')
            status=$(echo "$status_output" | jq -r '.status' 2>/dev/null || echo "error")
            
            if [[ "$status" == "100" ]]; then
              echo "Scan completed successfully"
              # Add extra wait after completion
              echo "Allowing ZAP to finalize processes..."
              sleep 30
              break
            elif [[ "$status" == "error" ]]; then
              echo "Error retrieving scan status: $status_output"
              sleep 10
              continue
            fi
            
            if [ "$status" != "$last_status" ]; then
              echo "Scan progress: $status%"
              last_status=$status
            fi
            
            sleep 30
          done
          
          # Generate report with retries and validation
          echo "Generating scan report..."
          for i in {1..5}; do
            report_output=$(docker exec zap sh -c 'curl -s "http://localhost:8080/OTHER/core/other/htmlreport/?apikey=" -o /zap/wrk/zap-active-report.html 2>&1')
            exit_code=$?
            
            # Check file size
            file_size=$(docker exec zap sh -c 'stat -c %s /zap/wrk/zap-active-report.html 2>/dev/null || echo 0')
            
            if [ $exit_code -eq 0 ] && [ "$file_size" -gt 10000 ]; then
              echo "Report generated successfully (size: $file_size bytes)"
              break
            else
              echo "Report generation attempt $i failed (size: $file_size bytes, exit: $exit_code): $report_output"
              sleep 10
            fi
          done
          
          # Final verification
          docker exec zap sh -c 'ls -lh /zap/wrk'

      - name: Create report backup
        if: always()
        run: |
          docker exec zap sh -c 'cp /zap/wrk/zap-active-report.html /zap/wrk/zap-active-report-$(date +%s).html'

      - name: Stop ZAP
        if: always()
        run: |
          docker stop zap || echo "Container stop failed"
          docker rm zap || echo "Container removal failed"

      - name: Verify report locally
        run: |
          echo "Report file details:"
          ls -lh zap-reports
          file_size=$(stat -c %s zap-reports/zap-active-report.html 2>/dev/null || echo 0)
          if [ "$file_size" -gt 10000 ]; then
            echo "✅ Valid report (size: $file_size bytes)"
          else
            echo "❌ Report file too small or missing (size: $file_size bytes)"
            exit 1
          fi

      - name: Upload ZAP Active Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-active-report
          path: zap-reports/zap-active-report.html

      - name: Upload ZAP Backup Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-backup-reports
          path: zap-reports/*.html