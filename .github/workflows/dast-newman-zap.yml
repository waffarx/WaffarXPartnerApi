name: "DAST: Newman + ZAP Proxy 7"

on:
  workflow_dispatch:

jobs:
  dast-proxy:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your code + postman/ + add-signature.js
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Prep a folder for ZAP to dump its report
      - name: Prepare report directory
        run: mkdir -p zap-reports

      # 3) Pull the ZAP Docker image
      - name: Pull OWASP ZAP image
        run: docker pull zaproxy/zap-stable:latest

      # 4) Start ZAP in daemon mode, mounting your scripts + report dir
      - name: Start ZAP daemon
        run: |
          docker run -d --name zap \
            -p 8080:8080 \
            -v ${{ github.workspace }}/postman:/zap/postman \
            -v ${{ github.workspace }}/add-signature.js:/zap/scripts/add-signature.js \
            -v ${{ github.workspace }}/zap-reports:/zap/wrk \
            zaproxy/zap-stable:latest \
            zap.sh -daemon -host 0.0.0.0 -port 8080 \
                   -config api.disablekey=true

      # 5) Wait for ZAP‚Äôs API to be accessible on the host
      - name: Wait for ZAP to start
        run: |
          for i in {1..24}; do
            curl --silent --fail http://127.0.0.1:8080 && break
            sleep 5
          done

      # 6) Install Node.js & Newman
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Newman
        run: npm install -g newman

      # 7) Replay your Postman collection through the ZAP proxy
      - name: Run Postman via ZAP proxy
        env:
          HTTP_PROXY: http://127.0.0.1:8080
          HTTPS_PROXY: http://127.0.0.1:8080
          NODE_TLS_REJECT_UNAUTHORIZED: '0'
        run: |
          newman run postman/WaffarXPartnerApi.postman_collection.json \
            --globals postman/workspace.postman_globals.json

      # 8) Full active scan inside the container (with in‚Äêcontainer health check)
      - name: Run ZAP active scan
        run: |
          ZAP_CID=$(docker ps --filter name=zap -q)

          # Ensure ZAP's internal API is ready
          for i in {1..12}; do
            docker exec $ZAP_CID curl --fail http://localhost:8080 && break
            sleep 5
          done

          # Execute the scan, writing HTML to /zap/wrk (‚Üí host zap-reports/)
          docker exec $ZAP_CID zap-full-scan.py \
            -t https://partners.waffarx.com/health \
            -z "-config api.disablekey=true" \
            -d \
            -m 5 \
            -r /zap/wrk/zap-active-report.html

      # 9) Tear down
      - name: Stop ZAP
        run: docker stop zap

      # üîü Upload the HTML report as an artifact
      - name: Upload ZAP Active Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-active-report
          path: zap-reports/zap-active-report.html
